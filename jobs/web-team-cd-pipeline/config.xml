<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1.4">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.uniqueid.impl.JobIdStore_-JobIdProperty plugin="unique-id@1.2">
      <id>
        <id>ZGFmOTNmZDctOTc4My00NTgwLTkyZD</id>
      </id>
    </org.jenkinsci.plugins.uniqueid.impl.JobIdStore_-JobIdProperty>
    <com.cloudbees.opscenter.analytics.reporter.items.AnalyticsJobProperty plugin="operations-center-analytics-reporter@1.6.1">
      <created>1429550132759</created>
    </com.cloudbees.opscenter.analytics.reporter.items.AnalyticsJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@1.4">
    <script>tomcatHost = &apos;localhost&apos;
tomcatPort = &apos;8180&apos;
appHost = &quot;http://${tomcatHost}:${tomcatPort}&quot;
tomcatUser = &apos;admin&apos;
tomcatPassword = &apos;tomcat&apos;
tomcatDeployUrl = &quot;http://${tomcatUser}:${tomcatPassword}@${tomcatHost}:${tomcatPort}/manager/deploy&quot;
tomcatUndeployUrl = &quot;http://${tomcatUser}:${tomcatPassword}@${tomcatHost}:${tomcatPort}/manager/undeploy&quot;
artifactName=&apos;webapp.war&apos;

node(&apos;linux-rhel-66&apos;) {
   git url: &apos;https://github.com/jenkinsbyexample/workflow-plugin-pipeline-demo.git&apos;
   devQAStaging()
}
production()

def devQAStaging() {
    stage &apos;Build&apos;
    sh &apos;mvn clean package&apos;
    archive &quot;target/${artifactName}&quot;

    stage &apos;Code Coverage&apos;
    echo &apos;Using Sonar for code coverage&apos;

    stage &apos;QA&apos;

    parallel(longerTests: {
        runWithServer {url -&gt;
            sh &quot;mvn -f sometests/pom.xml test -Durl=${url} -Dduration=30&quot;
        }
    }, quickerTests: {
        runWithServer {url -&gt;
            sh &quot;mvn -f sometests/pom.xml test -Durl=${url} -Dduration=20&quot;
        }
    })

    try {
        checkpoint(&apos;Before Staging&apos;)
    } catch (NoSuchMethodError _) {
        echo &apos;Checkpoint feature available in Jenkins Enterprise by CloudBees.&apos;
    }

    stage name: &apos;Staging&apos;, concurrency: 1
    deploy &quot;target/${artifactName}&quot;, &apos;staging&apos;
    smokeTest &apos;staging&apos;
}

def production() {
    //input message: &quot;Does ${appHost}/staging/ look good?&quot;
    try {
        checkpoint(&apos;Before production&apos;)
    } catch (NoSuchMethodError _) {
        echo &apos;Checkpoint feature available in Jenkins Enterprise by CloudBees.&apos;
    }
   
    stage name: &apos;Production&apos;, concurrency: 1
    node(&apos;master&apos;) {        
        sh &quot;curl -I ${appHost}/staging/&quot;
        // Parameters in an array doesn&apos;t seem to work. Throws java.lang.ClassCastException: org.codehaus.groovy.runtime.GStringImpl cannot be cast to java.lang.String
        //unarchive mapping: [&quot;target/${artifactName}&quot; : &quot;${artifactName}&quot;]
        unarchive mapping: [&apos;target/webapp.war&apos; : &apos;webapp.war&apos;]
        deploy &quot;${artifactName}&quot;, &apos;production&apos;
        smokeTest &apos;production&apos;
        echo &quot;Deployed to ${appHost}/production/&quot;
    }

    node {
        undeploy &apos;staging&apos;
        sleep 20       
        undeploy &apos;production&apos;
    }
}

def deploy(war, id) {
    sh &quot;curl --upload-file ${war} &apos;${tomcatDeployUrl}?path=/${id}&amp;update=true&apos;&quot;
}

def undeploy(id) {
    sh &quot;curl &apos;${tomcatUndeployUrl}?path=/${id}&apos;&quot;
}

def runWithServer(body) {
    def id = UUID.randomUUID().toString()
    deploy &quot;target/${artifactName}&quot;, id
    try {
        body.call &quot;${appHost}/${id}/&quot;
    } finally {
        undeploy id
    }
}

def smokeTest(id) {
    sh &quot;curl --write-out %{http_code} --silent -iL --output /dev/null ${appHost}/${id} &gt; result&quot;
    def httpCode = readFile(&apos;result&apos;)
    echo &quot;Returned HTTP-${httpCode}&quot;
    
    if (httpCode.isNumber()) {
        code = httpCode as int
        if ( code &gt; 200 ) {
           error &quot;Smoke test failed HTTP - [${httpCode}]&quot;
        }
    }
    else {
        error &quot;Smoke test failed HTTP - [${httpCode}]&quot;
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>